{"version":3,"sources":["components/TodoList/TodoList.jsx","api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","todos","selectedUserId","query","handleChange","showSelectedTodo","randomTodo","isRandomTodo","filteredTodos","filter","todo","title","toLowerCase","includes","randomTodos","sort","Math","random","className","type","placeholder","name","value","onChange","onClick","map","key","id","completed","checked","readOnly","userId","API_URL","getTodos","fetch","then","response","json","serverResponse","data","getUsers","CurrentUser","state","user","userInfo","props","setState","this","prevState","email","phone","onClear","React","Component","App","event","status","target","selectedUser","clearSelectedUser","length","role","aria-hidden","ReactDOM","render","document","getElementById"],"mappings":"uWAIaA,G,MAAW,SAAC,GAQlB,IAPLC,EAOI,EAPJA,MACAC,EAMI,EANJA,eACAC,EAKI,EALJA,MACAC,EAII,EAJJA,aACAC,EAGI,EAHJA,iBACAC,EAEI,EAFJA,WACAC,EACI,EADJA,aAEMC,EAAgBP,EAAMQ,QAAO,SAAAC,GAAI,OACrCA,EAAKC,MAAMC,cACRC,SAASV,EAAMS,kBAGdE,EAAc,YAAIb,GAAOc,MAAK,kBAAMC,KAAKC,SAAW,MAO1D,OACE,yBAAKC,UAAU,YACb,sCAEA,2BACEC,KAAK,OACLC,YAAY,YACZC,KAAK,QACLC,MAAOnB,EACPoB,SAAUnB,IAEZ,4BACEiB,KAAK,eACLE,SAAUlB,GAEV,4BAAQiB,MAAM,OAAd,YACA,4BAAQA,MAAM,SAAd,eACA,4BAAQA,MAAM,QAAd,mBAGF,4BACEH,KAAK,SACLE,KAAK,YACLH,UAAU,gEAIVM,QAASlB,GAPX,aAYA,yBAAKY,UAAU,4BACb,wBAAIA,UAAU,mBACVX,EACGO,EACAN,GAAgBiB,KAAI,SAAAf,GAAI,OACzB,wBACEgB,IAAKhB,EAAKiB,GACVT,UACER,EAAKkB,UACD,yCACA,4CAGN,+BACE,2BACET,KAAK,WACLU,QAASnB,EAAKkB,UACdE,UAAQ,IAEV,2BAAIpB,EAAKC,QAGX,4BACEQ,KAAK,SACLE,KAAK,QACLH,UAAU,gEAIVM,QAAS,kBAAMtB,EAAeQ,EAAKqB,UAPrC,WAUGrB,EAAKqB,iBCzFlBC,G,MAAO,mCAEN,SAASC,IACd,OAAOC,MAAM,GAAD,OAAIF,EAAJ,UACTG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAc,OAAIA,EAAeC,MAAQD,KAC9CH,MAAK,SAAAlC,GAAK,OAAIA,EAAMQ,QAAO,SAAAC,GAAI,OAAIA,EAAKC,YAGtC,SAAS6B,EAAST,GACvB,OAAOG,MAAM,GAAD,OAAIF,EAAJ,iBAAoBD,IAC7BI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UCNxB,IAAMI,EAAb,4MACEC,MAAQ,CACNC,KAAM,IAFV,EAeEC,SAAW,WACTJ,EAAS,EAAKK,MAAMd,QACjBI,MAAK,SAACQ,GACL,EAAKG,SAAS,CAAEH,KAAMA,EAAKJ,WAlBnC,uDAKE,WACEQ,KAAKH,aANT,gCASE,SAAmBI,GACbA,EAAUjB,SAAWgB,KAAKF,MAAMd,QAClCgB,KAAKH,aAXX,oBAsBE,WACE,MAKIG,KAAKL,MAAMC,KAJbhB,EADF,EACEA,GACAN,EAFF,EAEEA,KACA4B,EAHF,EAGEA,MACAC,EAJF,EAIEA,MAGMC,EAAYJ,KAAKF,MAAjBM,QAER,OACE,yBAAKjC,UAAU,eAEb,wBAAIA,UAAU,sBACZ,+CAEGS,IAIL,wBAAIT,UAAU,qBACXG,GAEH,uBAAGH,UAAU,sBACV+B,GAEH,uBAAG/B,UAAU,sBACVgC,GAEH,4BACE/B,KAAK,SACLD,UAAU,4BACVM,QAAS2B,GAHX,cAnDR,GAAiCC,IAAMC,WC+HxBC,E,4MA5HbZ,MAAQ,CACNzC,MAAO,GACPC,eAAgB,EAChBC,MAAO,GACPI,cAAc,G,EAUhBF,iBAAmB,SAACkD,GAClB,IACIC,EADIlC,EAAUiC,EAAME,OAAhBnC,MAGM,SAAVA,IACFkC,GAAS,GAGG,UAAVlC,IACFkC,GAAS,GAGG,QAAVlC,IACFkC,EAASlC,GAGXW,IACGE,MAAK,SAAClC,GACL,EAAK6C,SAAS,CACZ7C,MAAOA,EAAMQ,QAAO,SAAAC,GAAI,MACX,QAAX8C,EACI9C,EACAA,EAAKkB,YAAc4B,W,EAMjClD,WAAa,WACX,EAAKwC,UAAS,SAAAJ,GAAK,MAAK,CACtBnC,cAAemC,EAAMnC,kB,EAIzBmD,aAAe,SAACxD,GACd,EAAK4C,SAAS,CAAE5C,oB,EAGlByD,kBAAoB,WAClB,EAAKb,SAAS,CACZ5C,eAAgB,K,EAIpBE,aAAe,SAACmD,GACd,MAAwBA,EAAME,OAAtBpC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAEd,EAAKwB,SAAL,eACGzB,EAAOC,K,uDAvDZ,WAAqB,IAAD,OAClBW,IACGE,MAAK,SAAClC,GACL,EAAK6C,SAAS,CAAE7C,e,oBAwDtB,WACE,MAKI8C,KAAKL,MAJPzC,EADF,EACEA,MACAC,EAFF,EAEEA,eACAC,EAHF,EAGEA,MACAI,EAJF,EAIEA,aAIAmD,EAKEX,KALFW,aACAtD,EAIE2C,KAJF3C,aACAC,EAGE0C,KAHF1C,iBACAC,EAEEyC,KAFFzC,WACAqD,EACEZ,KADFY,kBAGF,OACE,yBAAKzC,UAAU,OACb,yBAAKA,UAAU,gBACZjB,EAAM2D,OACL,kBAAC,EAAD,CACA3D,MAAOA,EACPE,MAAOA,EACPG,WAAYA,EACZC,aAAcA,EACdH,aAAcA,EACdF,eAAgBwD,EAChBrD,iBAAkBA,IAElB,yBACEa,UAAU,6BAGZ,8CACA,yBACEA,UAAU,yBACV2C,KAAK,SACLC,cAAY,WAMlB,yBAAK5C,UAAU,gBACb,yBAAKA,UAAU,0BACZhB,EACC,kBAAC,EAAD,CACE6B,OAAQ7B,EACRiD,QAASQ,IAET,0B,GArHEP,IAAMC,WCHxBU,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.233f02be.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport PropTypes from 'prop-types';\n\nexport const TodoList = ({\n  todos,\n  selectedUserId,\n  query,\n  handleChange,\n  showSelectedTodo,\n  randomTodo,\n  isRandomTodo,\n}) => {\n  const filteredTodos = todos.filter(todo => (\n    todo.title.toLowerCase()\n      .includes(query.toLowerCase())\n  ));\n\n  const randomTodos = [...todos].sort(() => Math.random() - 0.5);\n  // let displayedTodo = [];\n\n  // isRandomTodo\n  //   ? displayedTodo = randomTodos\n  //   : displayedTodo = filteredTodos;\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <input\n        type=\"text\"\n        placeholder=\"Find user\"\n        name=\"query\"\n        value={query}\n        onChange={handleChange}\n      />\n      <select\n        name=\"selectedTodo\"\n        onChange={showSelectedTodo}\n      >\n        <option value=\"all\">Show all</option>\n        <option value=\"false\">Show active</option>\n        <option value=\"true\">Show completed</option>\n      </select>\n\n      <button\n        type=\"button\"\n        name=\"randomize\"\n        className=\"\n            TodoList__user-button\n            TodoList__user-button--selected\n            button\"\n        onClick={randomTodo}\n      >\n        Randomize\n      </button>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {(isRandomTodo\n            ? (randomTodos)\n            : (filteredTodos)).map(todo => (\n              <li\n                key={todo.id}\n                className={\n                  todo.completed\n                    ? 'TodoList__item TodoList__item--checked'\n                    : 'TodoList__item TodoList__item--unchecked'\n                  }\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  type=\"button\"\n                  name=\"query\"\n                  className=\"\n                  TodoList__user-button\n                  TodoList__user-button--selected\n                  button\"\n                  onClick={() => selectedUserId(todo.userId)}\n                >\n                  User&nbsp;\n                  {todo.userId}\n                </button>\n              </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      completed: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n      userId: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  selectedUserId: PropTypes.string.isRequired,\n  query: PropTypes.string.isRequired,\n  handleChange: PropTypes.func.isRequired,\n  showSelectedTodo: PropTypes.func.isRequired,\n  randomTodo: PropTypes.func.isRequired,\n  isRandomTodo: PropTypes.bool.isRequired,\n}.isRequired;\n","const API_URL = `https://mate-api.herokuapp.com/`;\n\nexport function getTodos() {\n  return fetch(`${API_URL}todos`)\n    .then(response => response.json())\n    .then(serverResponse => serverResponse.data || serverResponse)\n    .then(todos => todos.filter(todo => todo.title));\n}\n\nexport function getUsers(userId) {\n  return fetch(`${API_URL}users/${userId}`)\n    .then(response => response.json());\n}\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { getUsers } from '../../api/api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: '',\n  };\n\n  componentDidMount() {\n    this.userInfo();\n  }\n\n  componentDidUpdate(prevState) {\n    if (prevState.userId !== this.props.userId) {\n      this.userInfo();\n    }\n  }\n\n  userInfo = () => {\n    getUsers(this.props.userId)\n      .then((user) => {\n        this.setState({ user: user.data });\n      });\n  };\n\n  render() {\n    const {\n      id,\n      name,\n      email,\n      phone,\n    } = this.state.user;\n\n    const { onClear } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        \n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {id}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">\n          {name}\n        </h3>\n        <p className=\"CurrentUser__email\">\n          {email}\n        </p>\n        <p className=\"CurrentUser__phone\">\n          {phone}\n        </p>\n        <button\n          type=\"button\"\n          className=\"button CurrentUser__clear\"\n          onClick={onClear}\n        >\n          clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.string.isRequired,\n  onClear: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n    query: '',\n    isRandomTodo: false,\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then((todos) => {\n        this.setState({ todos });\n      });\n  }\n\n  showSelectedTodo = (event) => {\n    const { value } = event.target;\n    let status;\n\n    if (value === 'true') {\n      status = true;\n    }\n\n    if (value === 'false') {\n      status = false;\n    }\n\n    if (value === 'all') {\n      status = value;\n    }\n\n    getTodos()\n      .then((todos) => {\n        this.setState({\n          todos: todos.filter(todo => (\n            status === 'all'\n              ? todo\n              : todo.completed === status\n          )),\n        });\n      });\n  }\n\n  randomTodo = () => {\n    this.setState(state => ({\n      isRandomTodo: !state.isRandomTodo,\n    }));\n  };\n\n  selectedUser = (selectedUserId) => {\n    this.setState({ selectedUserId });\n  }\n\n  clearSelectedUser = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  render() {\n    const {\n      todos,\n      selectedUserId,\n      query,\n      isRandomTodo,\n    } = this.state;\n\n    const {\n      selectedUser,\n      handleChange,\n      showSelectedTodo,\n      randomTodo,\n      clearSelectedUser,\n    } = this;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          {todos.length\n          ? <TodoList\n            todos={todos}\n            query={query}\n            randomTodo={randomTodo}\n            isRandomTodo={isRandomTodo}\n            handleChange={handleChange}\n            selectedUserId={selectedUser}\n            showSelectedTodo={showSelectedTodo}\n          />\n          : <div\n              className=\"d-flex\n              align-items-center\"\n            >\n            <strong>Loading...</strong>\n            <div\n              className=\"spinner-border ms-auto\"\n              role=\"status\"\n              aria-hidden=\"true\"\n            >\n            </div>\n          </div>}\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                onClear={clearSelectedUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}